import {Context, Telegraf} from "telegraf";
import {message} from "telegraf/filters";
import {checkUserCanMakeQuery, createUserIfNotExist, decreaseFreeLimit} from "./utils/user";
import {askGpt} from "./utils/gpt";

export const messageHandler = (bot:Telegraf<Context>) => bot.on(message('text'), async (ctx) => {
    const tgUser = ctx.update.message.from

    if (tgUser.is_bot){
        return;
    }

    await createUserIfNotExist({
        tgId: tgUser.id,
        nickname: tgUser.username,
        firstName: tgUser.first_name,
        lastName: tgUser.last_name
    })

    const isSendingEnabled = await checkUserCanMakeQuery(tgUser.id)

    if (!isSendingEnabled){
        ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ üò¢\n' +
            '–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ @evgenyship')
        return;
    }

    const message = await ctx.reply('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –∂–¥–∏—Ç–µ! üòä')

    const text = ctx.update.message.text

    const chatId = ctx.update.message.chat.id

    const {text: result} = await askGpt(chatId, text);

    ctx.reply(result, {parse_mode: 'Markdown'});

    ctx.deleteMessage(message.message_id)

    await decreaseFreeLimit(tgUser.id)

})