import {user} from "../utils/user";
import * as fs from "fs";
import * as path from "path";
import {formatDate, subscriptionEnd} from "../utils/utils";
import {CommandsQueueData} from "../queues";
import {ParseMode, telegramApi} from "../utils/telegramApi";
import {throttlingStorage} from "../utils/redisStorage";
import {log} from "../utils/logs";
import {context} from "../utils/context";

export enum Command {
    PROFILE= "üë§–ü—Ä–æ—Ñ–∏–ª—å",
    HELP = "‚ùî–ü–æ–º–æ—â—å",
    BUY = "üöÄ–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É",
    RESET_CONTEXT = "üßπ–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç",
}
export enum BotCommands {
    PROFILE= "/profile",
    HELP = "/help",
    BUY = "/buy",
    RESET_CONTEXT = "/reset_context",
    START = "/start"
}

export const helpHandler = async (data: CommandsQueueData) => {
    const time1 = performance.now()
    // –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª —á—Ç–æ–± –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫
    fs.readFile(path.join(__dirname, '../../public/help.txt'), 'utf-8', (err, text) => {
            const time2 = performance.now()
            log.info(`read file from disc: ${time2-time1}`)
            telegramApi.sendMessage(data.chatId, text)
        }
    );
}

export const buyHandler = async (data: CommandsQueueData) => {
    const subscription = await user.getPaidSubscription(data.user.id.toString())

    if (subscription){
        const text = `–ú–µ—Å—è—á–Ω–∞—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç! \n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatDate(subscriptionEnd(subscription.dateCreate))}`
        await telegramApi.sendMessage(data.chatId, text)
        return;
    }

    await telegramApi.sendInvoice({
        chat_id: data.chatId,
        currency: 'RUB',
        description: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ ChatGPT-4.\n' +
            '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏ - 1 –º–µ—Å—è—Ü.',
        title: '–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞',
        prices: [{label: '–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞', amount: 499*100 /* 499 —Ä—É–±–ª–µ–π */}],
        payload: JSON.stringify({userId: data.user.id})
    })
}

export const profileHandler = async (data: CommandsQueueData) => {
    const userEntity = await user.get(data.user.id)
    if (!userEntity){
        const text = `–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ${BotCommands.START}`
        await telegramApi.sendMessage(data.chatId, text, ParseMode.MARKDOWN)
        return
    }

    const {tgId, nickname, freeLimit} = userEntity;
    const paidSubscription = await user.getPaidSubscription(tgId)

    const message = `ID: ${tgId} \n–Æ–∑–µ—Ä–Ω–µ–π–º: ${nickname} \n–ü–æ–¥–ø–∏—Å–∫–∞: ${paidSubscription ? "–ø—Ä–µ–º–∏—É–º" : "–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è"}
    ${!paidSubscription ? `\n–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: ${freeLimit} / 10` : `\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ :${formatDate(subscriptionEnd(paidSubscription.dateCreate))}`}`
    await telegramApi.sendMessage(data.chatId, message, ParseMode.MARKDOWN)
}

export const resetContextHandler = async (data: CommandsQueueData) => {
    await context.clear(data.chatId)
    await throttlingStorage.drop({chatId: data.chatId, userId: data.user.id})
    await telegramApi.sendMessage(data.chatId,'–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
}